#!/bin/bash
# /etc/init.d/openttd

### BEGIN INIT INFO
# Provides:   openttd
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    OPENTTD server
# Description:    Init script for openttd server. 
### END INIT INFO

# Created by Frodus

## Loads config file
if [ -L $0 ]
then
	source `readlink -e $0 | sed "s:[^/]*$:config:"`
else
	source `echo $0 | sed "s:[^/]*$:config:"`
fi

##Checks if config file is ok.
if [ "$SERVICE" == "" ]
then
	echo "Couldn't load config file, please edit config.example and rename it to config"
	logger -t minecraft-init "Couldn't load config file, please edit config.example and rename it to config"
	exit
fi

ME=`whoami`
as_user() {
	if [ $ME == $USERNAME ] ; then
		bash -c "$1"
	else
		su $USERNAME -s /bin/bash -c "$1"
	fi
}

openttd_start() {
	pidfile=${PATH}/${SCREEN}.pid
	check_permissions

	as_user "screen -dmS $SCREEN $SERVICE -D"
	as_user "screen -list | grep '\.$SCREEN' | cut -f1 -d'.' | tr -d -c 0-9 > $pidfile"

	#
	# Waiting for the server to start
	#
	seconds=0
	until is_running 
	do
		sleep 1
		seconds=$seconds+1
		if [[ $seconds -eq 10 ]]
		then
			echo "Still not running, waiting a while longer..."
		fi
		if [[ $seconds -ge 120 ]]
		then
			echo "Failed to start, aborting."
			exit 1
		fi
	done	
	echo "$SERVICE is running."
}

openttd_stop() {
	pidfile=${PATH}/${SCREEN}.pid
	#
	# Stops the server
	#
	sleep 10
	echo "Stopping server..."
	openttd_command stop
	sleep 0.5
	#
	# Waiting for the server to shut down
	#
	seconds=0
	isInStop=1
	while is_running
	do
		sleep 1 
		seconds=$seconds+1
		if [[ $seconds -eq 5 ]]
		then
			echo "Still not shut down, waiting a while longer..."
		fi
		if [[ $seconds -ge 120 ]]
		then
			logger -t openttd-init "Failed to shut down server, aborting."
			echo "Failed to shut down, aborting."
			exit 1
		fi
	done
	as_user "rm $pidfile"
	unset isInStop
	is_running
	echo "$SERVICE is now shut down."
}

check_permissions() {
	as_user "touch $pidfile"
	if ! as_user "test -w '$pidfile'" ; then 
		echo "Check Permissions. Cannot write to $pidfile. Correct the permissions and then excute: $0 status"
	fi
}

is_running() {
	# Checks for the minecraft servers screen session
	# returns true if it exists.
	pidfile=${PATH}/${SCREEN}.pid

	if [ -r "$pidfile" ]
	then
		pid=$(head -1 $pidfile)
		if ps ax | grep -v grep | grep ${pid} | grep "${SCREEN}" > /dev/null
		then
			return 0
		else 
			if [ -z "$isInStop" ]
			then
				if [ -z "$roguePrinted" ]
				then
					roguePrinted=1
					echo "Rogue pidfile found!"
				fi
			fi
			return 1
		fi
	else
		if ps ax | grep -v grep | grep "${SCREEN} ${SERVICE}" > /dev/null
		then
			echo "No pidfile found, but server's running."
			echo "Re-creating the pidfile."
			
			pid=$(ps ax | grep -v grep | grep "${SCREEN} ${SERVICE}" | cut -f1 -d' ')
			check_permissions
			as_user "echo $pid > $pidfile"

			return 0
		else
			return 1
		fi
	fi
}


trap force_exit SIGINT

case "$1" in
	start)
		# Starts the server
		if is_running; then
			echo "Server already running."
		else
			check_links
			openttd_start
		fi
		;;
	stop)
		# Stops the server
		if is_running; then
			openttd_stop
		else
			echo "No running server."
		fi
		;;
	restart)
		# Restarts the server
		if is_running; then
			openttd_stop
		else
			echo "No running server, starting it..."
		fi
		check_links
		openttd_start
		;;
	help|--help|-h)
		echo "Usage: $0 COMMAND"
		echo 
		echo "Available commands:"
		echo -e "   start \t\t Starts the server"
		echo -e "   stop \t\t Stops the server"
		echo -e "   kill \t\t Kills the server"
		;;
	*)
		echo "No such command, see $0 help"
		exit 1
		;;
esac

exit 0